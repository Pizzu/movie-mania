import { type Ticket } from "@prisma/client";
import Head from "next/head";
import { useRouter } from "next/router";
import { useMemo, useState } from "react";
import { FormProvider, useForm, type SubmitHandler } from "react-hook-form";
import { toast } from "react-hot-toast";
import { SidebarLayout } from "~/components/layout";
import {
  Button,
  CheckBoxSeat,
  PaymentAlert,
  ReservationLegend,
  Screen,
  Skeleton,
} from "~/components/ui";
import { api } from "~/utils/api";
import { handleTRPCErrors } from "~/utils/errors";
import { type NextPageWithLayout } from "../../../_app";

const ReservationPage: NextPageWithLayout = ({}) => {
  const router = useRouter();

  const methods = useForm<{
    seats: string[];
  }>();

  const showId = router.query.id as string;

  const [selectedTickets, setSelectedTickets] = useState<Ticket[] | null>(null);
  const [showAlert, setShowAlert] = useState<boolean>(false);

  const { data, isLoading } = api.shows.getOneById.useQuery(
    {
      showId,
    },
    {
      onError: (error) => {
        const { isNotFound } = handleTRPCErrors({
          message: error.data?.stack,
          code: error.data?.code,
        });
        if (isNotFound) {
          void router.push("/not-found");
        }
      },
    }
  );

  const allTickets = useMemo(() => {
    if (data) {
      return data.show.tickets;
    }
  }, [data]);

  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const ticketId = event.target.value;
    const ticketSelected = event.target.checked;

    if (ticketSelected === true) {
      if (allTickets) {
        if (selectedTickets) {
          setSelectedTickets([
            ...selectedTickets,
            ...allTickets.filter((ticket) => ticketId === ticket.id),
          ]);
        } else {
          setSelectedTickets(
            allTickets.filter((ticket) => ticketId === ticket.id)
          );
        }
      }
    } else {
      if (selectedTickets) {
        setSelectedTickets(
          selectedTickets.filter((ticket) => ticketId !== ticket.id)
        );
      }
    }
  };

  const onSubmit: SubmitHandler<{ seats: string[] }> = ({ seats }) => {
    if (allTickets && seats && seats.length > 0 && selectedTickets) {
      setShowAlert(true);
    } else {
      toast.error("Select at least one available seat first");
    }
  };

  const onAlertSuccess = () => {
    console.log("Payment");
    setShowAlert(false);
  };

  const onAlertCancel = () => {
    console.log("Cancel");
    setShowAlert(false);
  };

  return (
    <>
      <Head>
        <title>MovieMania ðŸŽ¬ - Reservation</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section>
        <div className="mt-6">
          <Screen />
        </div>
        {isLoading || !data ? (
          <>
            <div className="mx-auto flex max-w-3xl flex-col items-center">
              <Skeleton className="mb-14 mt-14 h-48 w-full bg-secondaryBg" />
              <Skeleton className="mb-14 h-12 w-80 bg-secondaryBg" />
              <div className="flex gap-3">
                <Skeleton className="h-8 w-32 bg-secondaryBg" />
                <Skeleton className="h-8 w-32 bg-secondaryBg" />
                <Skeleton className="h-8 w-32 bg-secondaryBg" />
              </div>
            </div>
          </>
        ) : (
          <>
            <FormProvider {...methods}>
              <form onSubmit={methods.handleSubmit(onSubmit)}>
                <div className="mx-auto my-14 grid max-w-3xl grid-cols-6 gap-3 sm:grid-cols-6 md:grid-cols-6">
                  {allTickets &&
                    allTickets.map((ticket, index) => (
                      <CheckBoxSeat
                        key={index}
                        keyInput={"seats"}
                        ticket={ticket}
                        selectedTickets={selectedTickets}
                        onChange={onChange}
                      />
                    ))}
                </div>
                <div className="flex justify-center">
                  <Button className="w-80 py-4">Confirm Selection</Button>
                </div>
              </form>
            </FormProvider>
            <ReservationLegend className="mt-14" />
          </>
        )}
      </section>
      {data && data.show && selectedTickets && showAlert && (
        <PaymentAlert
          show={data && data.show}
          tickets={selectedTickets}
          showAlert={showAlert}
          onSuccess={onAlertSuccess}
          onCancel={onAlertCancel}
        />
      )}
    </>
  );
};

export default ReservationPage;

ReservationPage.additionalInfo = {
  getLayout: (page) => (
    <SidebarLayout backBtn={true} pageTitle="Choose seats">
      {page}
    </SidebarLayout>
  ),
  requiresAuth: true,
};
