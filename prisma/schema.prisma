// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id               String      @id @default(cuid())
    name             String?
    email            String?     @unique
    emailVerified    DateTime?
    image            String?
    stripeCustomerId String?     @unique
    accounts         Account[]
    sessions         Session[]
    ShowOrder        ShowOrder[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Movie {
    id          String   @id @default(cuid())
    title       String
    slug        String
    plot        String
    category    String
    director    String
    duration    String
    mainImage   String
    releaseDate DateTime @db.Date
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Show        Show[]
}

model Room {
    id        String   @id @default(cuid())
    name      String
    capacity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Show      Show[]
}

model Show {
    id        String      @id @default(cuid())
    movieId   String
    roomId    String
    showTime  DateTime
    showPrice Decimal     @db.Decimal(10, 2)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    movie     Movie       @relation(fields: [movieId], references: [id])
    room      Room        @relation(fields: [roomId], references: [id])
    tickets   Ticket[]
    ShowOrder ShowOrder[]

    @@index([movieId])
    @@index([roomId])
}

model Ticket {
    id          String     @id @default(cuid())
    showId      String
    seatNumber  String
    isAvailable Boolean
    showOrderId String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    show        Show       @relation(fields: [showId], references: [id])
    ShowOrder   ShowOrder? @relation(fields: [showOrderId], references: [id], onDelete: Cascade)

    @@index([showId])
    @@index([showOrderId])
}

model ShowOrder {
    id        String   @id @default(cuid())
    totalCost Int
    userId    String
    showId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    show      Show     @relation(fields: [showId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    tickets   Ticket[]

    @@index([userId])
    @@index([showId])
}
