// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Ticket        Ticket[]
    TicketOrder   TicketOrder[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Movie {
    id          Int      @id @default(autoincrement())
    title       String
    plot        String
    director    String
    duration    String
    releaseDate DateTime @db.Date
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Show        Show[]
}

model Room {
    id        Int      @id @default(autoincrement())
    name      String
    capacity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Show      Show[]
}

model Show {
    id        Int      @id @default(autoincrement())
    movieId   Int
    roomId    Int
    showTime  DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    movie     Movie    @relation(fields: [movieId], references: [id])
    room      Room     @relation(fields: [roomId], references: [id])
    tickets   Ticket[]

    @@index([movieId])
    @@index([roomId])
}

model Ticket {
    id            Int          @id @default(autoincrement())
    userId        String?
    showId        Int
    ticketOrderId Int?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    user          User?        @relation(fields: [userId], references: [id])
    show          Show         @relation(fields: [showId], references: [id])
    TicketOrder   TicketOrder? @relation(fields: [ticketOrderId], references: [id], onDelete: Cascade)

    @@index([showId])
    @@index([ticketOrderId])
    @@index([userId])
}

model TicketOrder {
    id        Int      @id @default(autoincrement())
    totalCost Int
    userId    String
    ticketId  Int
    user      User     @relation(fields: [userId], references: [id])
    tickets   Ticket[]

    @@index([userId])
}
